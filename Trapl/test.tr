
Container::<gen T>: struct
{
	data: gen T
}


List::<gen T::<gen U>>: struct
{
	data: gen T::<gen U>
}


Tests: struct
{
	a: Container::<Int32>,
	b: Container::<Int32>,
	c: Container::<Container::<Int32>>,
	d: Container::<Container::<Int32>>,

	e: List::<Container::<Int32>>,
	f: List::<Container::<Int32>>,
	g: List::<Container::<Int64>>,
	h: List::<Container::<Int64>>,
}


call_parametrized: funct(x: Int32)
{
	x = 1 + 1;
	x = 1 - 1;
	parametrized_funct::<Int32>(x);
	parametrized_funct::<&Int32>(&x);
	parametrized_funct::<Float64>(x);
	parametrized_funct::<List::<Container::<Int64>>>(x);

	x < 1;
	x < 1 + 2;
	x < 1 & x > 2;
}


parametrized_funct::<gen T>: funct(x: gen T -> gen T)
{
	let y: gen T;
	parametrized_funct::<gen T>(x);
}