struct Point
{
	x: Int,
	y: Int,
	z: *mut Int
}


fn get_num() -> Int
{
	let mut x = 123;
	let y = 42;
	let px = *mut x;
	let py = get_one_of(false, *x, *y);
	@px = @py;
	return x;
}


fn get_one_of(which: Bool, a: *Int, b: *Int) -> *Int
{
	if which
		{ return a }
	else
		{ return b }
}


fn get_ptr() -> *mut Int
{
	let mut x = 0;
	return *mut x;
}


fn param_test(x: Int, y: Point, z: *mut Point) -> *Int
{
	let i = 0;
	{ let i = 1; };
	let j = i;
	return *0;
}


fn test() -> ()
{
	let mut p = Point { x: 0, y: @get_ptr(), z: get_ptr() };
	p.x = 0;
	p.y = 1;
	@(p.z) = 2;

	@get_ptr() = 2;

	let p: *Int = *0;

	let x = 0;
	let px = *x;

	let mut y = 0;
	y = 1;

	let z = true;
	while z
		{  }
}